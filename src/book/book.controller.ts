import { BadRequestException, Body, ClassSerializerInterceptor, Controller, Delete, Get, Param, Post, Query, UseGuards, UseInterceptors } from '@nestjs/common';
import { CreateBookDto } from './dto/create-book.dto';
import { BookService } from './book.service';
import { AuthGuard } from 'src/auth/guard/auth.guard';
import { ApiParam, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';
import { BookResponseDto } from './dto/book-response.dto';

@ApiTags('Book')
@UseInterceptors(ClassSerializerInterceptor)
@Controller('book')
export class BookController {

    constructor(private bookService: BookService) { }


    @ApiResponse({
        status: 201,
        description: "Creates a book and return it with success response",
        type: BookResponseDto
    })
    @UseGuards(AuthGuard)
    @Post('create')
    async create(@Body() book: CreateBookDto) {
        return await this.bookService.createBook(book)
    }



    @ApiResponse({
        status: 204,
        description: "Soft delete the book and returns success response"
    })
    @ApiParam({
        name: "id",
        description: "Unique id of the book to delete generated by uuidV4",
        type: String,
        required: true,
        example: "f2794819-04f3-4c8c-a543-b728df623104"
    })
    @UseGuards(AuthGuard)
    @Delete(':id')
    async delete(@Param() params: { id: string }) {
        const { id } = params;
        return await this.bookService.deleteBook(id)
    }



    @ApiResponse({
        status: 200,
        description: "Returns list of books of a specific author",
        type: [BookResponseDto]
    })
    @ApiParam({
        name: "id",
        description: "Id of the author of the books",
        type: String,
        required: true,
        example: "max@123"
    })
    @UseGuards(AuthGuard)
    @Get('author/:id')
    async getAuthorBooks(@Param() params: { id: string }) {
        const { id } = params;
        return await this.bookService.getAuthorBooks(id)
    }




    @ApiResponse({
        status: 200,
        description: "Returns list of all books",
        type: [BookResponseDto]
    })
    @Get('')
    async getAllBooks() {
        return await this.bookService.getAllBooks()
    }



    @Get('by-date-range')
    @ApiQuery({ name: 'start', type: String, required: true, example: '2024-06-01' })
    @ApiQuery({ name: 'end', type: String, required: true, example: '2024-06-30' })
    @ApiResponse({ 
        status: 200, 
        description: 'List of books published within the given date range.',
        type: [BookResponseDto] 
    })
    @ApiResponse({ 
        status: 400, 
        description: 'Invalid date format.' 
    })
    async findBooksByDateRange(
        @Query('start') start: string,
        @Query('end') end: string
    ): Promise<BookResponseDto[]> {
        const startDate = new Date(start);
        const endDate = new Date(end);

        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
            throw new BadRequestException('Invalid date format');
        }

        return await this.bookService.findBooksByDateRange(startDate, endDate);
    }
}
